{"/home/travis/build/npmtest/node-npmtest-dominos/test.js":"/* istanbul instrument in package npmtest_dominos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dominos/lib.npmtest_dominos.js":"/* istanbul instrument in package npmtest_dominos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_dominos = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_dominos = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-dominos/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-dominos && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_dominos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_dominos\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_dominos.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_dominos.rollup.js'] =\n            local.assetsDict['/assets.npmtest_dominos.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_dominos.__dirname + '/lib.npmtest_dominos.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dominos/node_modules/dominos/dominos-pizza-api.js":"module.exports = {\n    Order: require('./src/Order'),\n    Address: require('./src/Address'),\n    Customer: require('./src/Customer'),\n    Store: require('./src/Store'),\n    Track: require('./src/Track'),\n    Item: require('./src/Item'),\n    Coupon: require('./src/Coupon'),\n    Util: require('./src/Utilities'),\n    \n    Menu: require('./src/Menu'),\n    MenuItem: require('./src/MenuItem'),\n    MenuCategory: require('./src/MenuCategory'),\n};\n","/home/travis/build/npmtest/node-npmtest-dominos/node_modules/dominos/src/Order.js":"'use strict';\n\nvar urls = require('./urls.json');\nvar httpJson = require('./http-json');\nvar util=require('util');\n\nvar Order = function(parameters) {\n  if(!parameters){\n      parameters={}\n  }\n  //default order\n  this.Address = '';\n  this.Coupons = [];\n  this.CustomerID = '';\n  this.Email = '';\n  this.Extension = '';\n  this.FirstName = '';\n  this.LastName = '';\n  this.LanguageCode = 'en';\n  this.OrderChannel = 'OLO';\n  this.OrderID = '';\n  this.OrderMethod = 'Web';\n  this.OrderTaker = null;\n  this.Payments = [];\n  this.Phone = '';\n  this.Products = [];\n  this.Market = '';\n  this.Currency = '';\n  this.ServiceMethod = parameters.deliveryMethod || 'Delivery';\n  this.SourceOrganizationURI = urls.sourceUri;\n  this.StoreID = parameters.storeID||'';\n  this.Tags = {};\n  this.Version = '1.0';\n  this.NoCombine = true;\n  this.Partners = {};\n  this.NewUser = true;\n  this.metaData = {};\n  this.Amounts = {};\n  this.BusinessDate = '';\n  this.EstimatedWaitMinutes = '';\n  this.PriceOrderTime = '';\n  this.AmountsBreakdown;\n\n  if(parameters['customer']) {\n    var Customer = parameters.customer;\n\n    this.Address = Customer.address;\n    this.CustomerID = Customer.ID;\n    this.Email = Customer.email;\n    this.FirstName = Customer.firstName;\n    this.LastName = Customer.lastName;\n    this.Phone = Customer.phone;\n    return this;\n  }\n  if(parameters['Order'] || parameters['order']) {  //Used to initialize order object from Dominos results (Also handy for initializing from DB)\n    var prevOrder = parameters.Order;\n    var Customer = parameters.customer;\n\n    this.Address = (Customer)? (\n        (Customer.address)? Customer.address : prevOrder.Address\n    ):prevOrder.Address;\n\n    this.CustomerID = (Customer)? (\n        (Customer.address)? Customer.ID : prevOrder.CustomerID\n    ):prevOrder.CustomerID;\n\n    this.Email = (Customer)? (\n        (Customer.address)? Customer.email : prevOrder.Email\n    ):prevOrder.Email;\n\n    this.FirstName = (Customer)? (\n        (Customer.address)? Customer.firstName : prevOrder.FirstName\n    ):prevOrder.FirstName;\n\n    this.LastName = (Customer)? (\n        (Customer.address)? Customer.lastName : prevOrder.LastName\n    ):prevOrder.LastName;\n\n    this.OrderID = prevOrder.OrderID;\n    this.Products = prevOrder.Products;\n    this.Market = prevOrder.Market;\n    this.Currency = prevOrder.Currency;\n    this.StoreID = prevOrder.StoreID;\n    this.Amounts = prevOrder.Amounts || {};\n    this.BusinessDate = prevOrder.BusinessDate || '';\n    this.EstimatedWaitMinutes = prevOrder.EstimatedWaitMinutes || '';\n    this.PriceOrderTime = prevOrder.PriceOrderTime || '';\n    this.AmountsBreakdown = prevOrder.AmountsBreakdown || {};\n\n    return this;\n  }\n};\n\nOrder.prototype.addCoupon = function(Coupon) { //Add coupon to Order\n    this.Coupons.push(Coupon)\n};\n\nOrder.prototype.removeCoupon = function(Coupon) { //Remove coupon from Order\n    var index = this.Coupons.indexOf(Coupon);\n    if (index != -1) {\n        this.Coupons.splice(index, 1);\n    }\n};\n\nOrder.prototype.addItem = function(Item) { //Add product to Order\n    this.Products.push(Item)\n};\n\nOrder.prototype.removeItem = function(Item) {  //Remove product from Order\n  var index = this.Products.indexOf(Item);\n  if(index != -1) {\n    this.Products.splice(index, 1);\n  }\n};\n\nOrder.prototype.validate = function(callback) {  //Validate Order\n  if(!this.Products || !callback) {\n    if(callback) {\n      callback({\n        success: false,\n        message: 'At least one Item must be added!'\n      });\n    }\n    return;\n  }\n\n  //Blame Dominos, this isn't my doing.\n  var stringified = JSON.stringify({\n    'Order' : this\n  });\n\n  httpJson.post(urls.order.validate, stringified, this.mergeResponse.bind(this,callback));\n};\n\nOrder.prototype.price = function(callback) {\n  if(!this.Products || !callback) {\n    if(callback) {\n      callback({\n        success: false,\n        message: 'At least one Item must be added!'\n      });\n    }\n    return;\n  }\n\n  var stringified = JSON.stringify({\n    'Order' : this\n  });\n\n  httpJson.post(urls.order.price, stringified, this.mergeResponse.bind(this,callback));\n};\n\nOrder.prototype.place = function(callback) {\n  if(!this.Products || !callback) {\n      if(callback) {\n          callback({\n              success: false,\n              message: 'At least one product must be added!'\n          })\n      }\n  }\n\n  var stringified = JSON.stringify({\n    'Order' : this\n  });\n\n  httpJson.post(urls.order.place, stringified, callback);\n};\n\nOrder.prototype.mergeResponse = function(callback,response){\n    for(var key in response.result.Order){\n        if(util.isArray(response.result.Order[key])&&!response.result.Order[key].length){\n            continue;\n        }\n        this[key]=response.result.Order[key];\n    }\n    //console.log(util.inspect(this.Products, { showHidden: true, depth: 5 }));\n    if(callback){\n        callback(response);\n    }\n}\n\nOrder.prototype.validateCC=function(number){\n    var re = {\n        visa        : /^4[0-9]{12}(?:[0-9]{3})?$/,\n        mastercard  : /^5[1-5][0-9]{14}$/,\n        amex        : /^3[47][0-9]{13}$/,\n        diners      : /^3(?:0[0-5]|[68][0-9])[0-9]{11}$/,\n        discover    : /^6(?:011|5[0-9]{2})[0-9]{12}$/,\n        jcb         : /^(?:2131|1800|35\\d{3})\\d{11}$/,\n        enroute     : /^(?:2014|2149)\\d{11}$/\n    };\n\n    if (re.visa.test(number))\n        return 'VISA';\n\n    if (re.mastercard.test(number))\n        return 'MASTERCARD';\n\n    if (re.amex.test(number))\n        return 'AMEX';\n\n    if (re.diners.test(number))\n        return 'DINERS';\n\n    if (re.discover.test(number))\n        return 'DISCOVER';\n\n    if (re.jcb.test(number))\n        return 'JCB';\n\n    if (re.enroute.test(number))\n        return 'JCB';\n\n    return \"\";\n}\n\nOrder.prototype.PaymentObject=function(){\n    Object.defineProperties(\n        this,\n        {\n            \"Type\": {\n                writable:false,\n                enumerable:true,\n                value:\"CreditCard\"\n            },\n            \"Amount\":  {\n                writable:true,\n                enumerable:true,\n                value:0\n            },\n            \"Number\":  {\n                writable:true,\n                enumerable:true,\n                value:\"\"\n            },\n            \"CardType\":  {\n                writable:true,\n                enumerable:true,\n                value:\"\"//uppercase\n            },\n            \"Expiration\":  {\n                writable:true,\n                enumerable:true,\n                value:\"\"//digits only\n            },\n            \"SecurityCode\":  {\n                writable:true,\n                enumerable:true,\n                value:\"\"\n            },\n            \"PostalCode\":  {\n                writable:true,\n                enumerable:true,\n                value:\"\"\n            }\n        }\n    );\n}\n\nmodule.exports = Order;\n","/home/travis/build/npmtest/node-npmtest-dominos/node_modules/dominos/src/http-json.js":"var http = require('request');\nvar urls = require('./urls.json')\n\nmodule.exports.post = function(url, req, callback) {\n    if(typeof req !=  'string')\n        req = JSON.stringify(req);\n\n    var requestBody = {\n        uri: url,\n        headers: {\n            Referer: urls.referer,\n            'Content-Type': 'application/json'\n        },\n        body: req\n    };\n    http.post(requestBody, function (error, res, body) {\n      if (error) {\n          return callback({\n            success: false,\n            message: error\n          });\n      }\n\n      if (res.statusCode !== 200) {\n          return callback({\n              success: false,\n              message: 'HTML Status Code Error ' + res.statusCode\n          });\n      }\n\n      try {\n          var parsed = JSON.parse(body);\n      }\n      catch(error){\n        console.log(error);\n        return callback({\n            success: false,\n            message: error\n        });\n      }\n\n      return callback({\n          success: true,\n          result: parsed\n      });\n  });\n}\n\nmodule.exports.get = function(url, callback){\n    var requestBody = {\n        uri: url,\n        headers: {\n            'Referer': urls.referer\n        }\n    };\n    http.get(requestBody, function (error, res, body) {\n            if (error){  //If request errored out.\n                callback({\n                    success: false,\n                    message: error\n                });\n                return;\n            }\n            if (res.statusCode !== 200){  //If request didn't error but response isn't status code 200.\n                callback({\n                    success: false,\n                    message: 'HTML Status Code Error ' + res.statusCode\n                });\n                return;\n            }\n\n            try {\n                var parsed = JSON.parse(body);\n            }\n            catch(error){\n              console.log(error);\n              return callback({\n                  success: false,\n                  message: error\n              });\n            }\n\n            return callback({\n                success: true,\n                result: parsed\n            });\n        }\n    );\n}\n","/home/travis/build/npmtest/node-npmtest-dominos/node_modules/dominos/src/Address.js":"'use strict';\n\nvar util = require('util');\n\nvar Address = function(parameters) {\n    Object.defineProperties(\n        this,\n        {\n            parse:{\n                value:parse,\n                enumerable:true,\n                writable:false\n            },\n            getAddressLines:{\n                value:getAddressLines,\n                enumerable:true,\n                writable:false\n            },\n            Type:{\n                value:'House',\n                enumerable:true,\n                writable:true\n            },\n            Street:{\n                value:'',\n                enumerable:true,\n                writable:true\n            },\n            City:{\n                value:'',\n                enumerable:true,\n                writable:true\n            },\n            Region:{\n                value:'',\n                enumerable:true,\n                writable:true\n            },\n            PostalCode:{\n                value:'',\n                enumerable:true,\n                writable:true\n            },\n            _init:{\n                value:init,\n                enumerable:false,\n                writable:false\n            },\n            _parameters:{\n                value:parameters,\n                enumerable:false,\n                writable:false\n            }\n        }\n    );\n\n    this._init();\n\n    function init(){\n        if (typeof this._parameters == 'object' && this._parameters.PostalCode) {\n            this.Street = this._parameters.Street;\n            this.City = this._parameters.City;\n            this.Region = this._parameters.Region;\n            this.PostalCode = this._parameters.PostalCode;\n        }\n\n\n\n        if (util.isArray(this._parameters)) {\n            this.Street = this._parameters[0];\n            this.City = this._parameters[1];\n            this.Region = this._parameters[2];\n            this.PostalCode = this._parameters[3];\n        }\n\n        if (typeof this._parameters == 'number') {\n            this._parameters+='';\n        }\n\n        if (typeof this._parameters == 'string') {\n            this.parse(this._parameters);\n        }\n\n        if (this._parameters.Type) {\n            this.Type = this._parameters.Type;\n        }\n    }\n\n    function parse(locationString) {\n        var splitAddress = locationString.split(',');\n\n        for (var i in splitAddress) {\n            splitAddress[i] = splitAddress[i].trim();\n        }\n\n        this.PostalCode= splitAddress[splitAddress.length-1]\n\n        //need better intellegence for auto determining address parts\n        //added some, should externalize it\n        //while not perfect, it does seem to get most of the right stuff\n        //in good enough places for dominos to like it.\n        switch (splitAddress.length) {\n            case 1:\n                if (!this.PostalCode) {\n                    this.PostalCode='';\n                    this.City = splitAddress[0];\n                }\n                break;\n            case 2:\n                if(splitAddress[0].length<3){\n                    this.Region = splitAddress[0];\n                }else{\n                    this.City = splitAddress[0];\n                }\n                if (!this.PostalCode) {\n                    if(splitAddress[1].length>2){\n                        if(this.City){\n                            this.Street = this.City;\n                        }\n                        this.City = splitAddress[1];\n                    }else{\n                        if(this.Region){\n                            this.City=this.Region;\n                        }\n                        this.Region = splitAddress[1];\n                    }\n                }\n                break;\n            case 3:\n                if(splitAddress[0].length<3){\n                    this.Region = splitAddress[0];\n                }else{\n                    this.City = splitAddress[0];\n                }\n\n                if(splitAddress[1].length<3){\n                    if(this.Region){\n                        if(this.City){\n                            this.Street = this.City;\n                        }\n                        this.City=this.Region;\n                    }\n                    this.Region = splitAddress[1];\n                }else{\n                    if(this.City){\n                        this.Street = this.City;\n                    }\n                    this.City = splitAddress[1];\n                }\n\n                if (!this.PostalCode) {\n                    if(splitAddress[2].length<3){\n                        if(this.Region){\n                            if(this.City){\n                                this.Street = this.City;\n                            }\n                            this.City=this.Region;\n                        }\n                        this.Region = splitAddress[2];\n                    }else{\n                        if(this.City){\n                            this.Street = this.City;\n                        }\n                        this.City = splitAddress[1];\n                    }\n                }\n                break;\n            case 4:\n                this.Street = splitAddress[0];\n                this.City = splitAddress[1];\n                this.Region = splitAddress[2];\n                this.PostalCode = splitAddress[3];\n        }\n\n        if (!this.PostalCode) {\n            this.PostalCode='';\n        }\n        //converts to string if number\n        this.PostalCode+='';\n    };\n\n    function getAddressLines() {\n        var line1 = this.Street||'';\n        var line2 = (this.City ? this.City + ',' : '') +\n            (this.Region ? this.Region + ',' : '') +\n            this.PostalCode\n\n        var lines=[line1, line2];\n        lines.line1=line1;\n        lines.line2=line2;\n\n        return lines;\n    }\n};\n\nmodule.exports = Address;\n","/home/travis/build/npmtest/node-npmtest-dominos/node_modules/dominos/src/Coupon.js":"'use strict';\n\nvar Coupon = function(parameters) {\n    this.Code = parameters.code;\n    this.Qty = parameters.quantity ? parameters.quantity : 1;\n    this.ID = 1;\n    this.isNew = true;\n}\n\nmodule.exports = Coupon;\n","/home/travis/build/npmtest/node-npmtest-dominos/node_modules/dominos/src/Customer.js":"'use strict';\n\nvar urls = require('./urls.json');\nvar httpJson = require('./http-json');\n\nvar Customer = function(parameters) {\n    this.ID = '';\n    // These are named with camelCase because Dominos API uses this format\n    if(!parameters){\n        parameters={\n            firstName:'',\n            lastName:'',\n            email:'',\n            phone:''\n        }\n    }\n    this.firstName = parameters.firstName;\n    this.lastName = parameters.lastName;\n    this.email = parameters.email;\n    this.address = parameters.address;\n    this.phone = parameters.phone;\n};\n\nmodule.exports = Customer;\n","/home/travis/build/npmtest/node-npmtest-dominos/node_modules/dominos/src/Item.js":"'use strict';\n\n\nvar Item = function(parameters) {\n    if(!parameters){\n        parameters={}\n    }\n\n    this.AutoRemove=false;\n\n    this.Code = parameters.code||null;\n    this.Qty = parameters.quantity||1;\n    this.ID = 1;\n    \n    this.isNew = true;\n    this.Options = { 'C': {'1/1': '1'}, 'X': {'1/1': '1'} };\n\n    if(parameters.options) {\n        for (var i=0; i<parameters.options.length; i++) {\n            this.Options[parameters.options[i]] = { '1/1': '1' };\n        }\n    }\n}\n\nmodule.exports = Item;\n","/home/travis/build/npmtest/node-npmtest-dominos/node_modules/dominos/src/MenuCategory.js":"'use strict';\r\n\r\n\r\nvar MenuCategory = function(menuData,parentCategory) {\r\n    if(!menuData) menuData={};\r\n\r\n    this.menuData = menuData;\r\n    this.subcategories = [];\r\n    this.products = [];\r\n    this.parent = parentCategory;\r\n}\r\n\r\nMenuCategory.prototype.getSubcategories = function() {\r\n    return this.subcategories;\r\n}\r\n\r\nMenuCategory.prototype.getName = function() {\r\n    return this.menuData.Name;\r\n}\r\n\r\nMenuCategory.prototype.getDescription = function() {\r\n    return this.menuData.Description;\r\n}\r\n\r\nMenuCategory.prototype.getCode = function() {\r\n    return this.menuData.Code;\r\n}\r\n\r\nMenuCategory.prototype.getCategoryPath = function() {\r\n    var result = this.parent !== undefined ? this.parent.getCategoryPath().concat([this.menuData.Code]) : [this.menuData.Code];\r\n    return result;\r\n}\r\n\r\nMenuCategory.prototype.getProducts = function() {\r\n    return this.products;\r\n}\r\n\r\nmodule.exports = MenuCategory;\r\n","/home/travis/build/npmtest/node-npmtest-dominos/node_modules/dominos/src/MenuItem.js":"'use strict';\r\n\r\n\r\nvar MenuItem = function(menuData) {\r\n    if(!menuData) menuData={};\r\n\r\n    this.menuData = menuData;\r\n    this.categories = [];\r\n}\r\n\r\nMenuItem.prototype.setCategories = function(categories) {\r\n    return this.categories = categories;\r\n}\r\n\r\nMenuItem.prototype.getCategories = function() {\r\n    return this.categories;\r\n}\r\n\r\nMenuItem.prototype.getName = function() {\r\n    return this.menuData.Name;\r\n}\r\n\r\nMenuItem.prototype.getDescription = function() {\r\n    return this.menuData.Description;\r\n}\r\n\r\nMenuItem.prototype.getCode = function() {\r\n    return this.menuData.Code;\r\n}\r\n\r\nmodule.exports = MenuItem;\r\n","/home/travis/build/npmtest/node-npmtest-dominos/node_modules/dominos/src/Menu.js":"'use strict';\r\n\r\nvar MenuItem = require('./MenuItem');\r\nvar MenuCategory = require('./MenuCategory');\r\n\r\n\r\nvar Menu = function(menuData) {\r\n    if(!menuData) {\r\n        menuData={};\r\n    } else {\r\n        this.parseMenu(menuData);\r\n    }\r\n    this.menuData = menuData;\r\n}\r\n\r\nMenu.prototype.getRaw = function() {\r\n    return this.menuData;\r\n}\r\n\r\nMenu.prototype.buildCategories = function(categoryData,parent) {\r\n    var category = new MenuCategory(categoryData,parent);\r\n    for (var subIndex in categoryData.Categories) {\r\n        category.getSubcategories().push(this.buildCategories(categoryData.Categories[subIndex],category));\r\n    }\r\n    categoryData.Products.forEach((function(productCode) { //link up products and categories\r\n        var product = this.menuByCode[productCode];\r\n        if (!product) {\r\n            console.log(\"PRODUCT NOT FOUND: \"+productCode,category.getCode());\r\n            return;\r\n        }\r\n        category.getProducts().push(product);\r\n        product.getCategories().push(category);\r\n    }).bind(this));\r\n    return category;\r\n}\r\n\r\nMenu.prototype.parseItems = function(parentMenuData,ParseClass) {\r\n    var items = [];\r\n    Object.keys(parentMenuData).forEach((function(code) {\r\n        var menuData = parentMenuData[code];\r\n        var obj = new ParseClass(menuData);\r\n        this.menuByCode[obj.getCode()] = obj;\r\n        items.push(obj);\r\n    }).bind(this));\r\n    return items;\r\n}\r\n\r\nMenu.prototype.parseMenu = function(menuData) {\r\n    this.menuByCode = {};\r\n    var products = this.parseItems(menuData.result.Products,MenuItem);\r\n    var coupons = this.parseItems(menuData.result.Coupons,MenuItem);\r\n    var preconfigured = this.parseItems(menuData.result.PreconfiguredProducts,MenuItem);\r\n\r\n    this.rootCategories = {}; //generate category tree using MenuCategory objects\r\n    for (var categoryType in menuData.result.Categorization) {\r\n        var categoryData = menuData.result.Categorization[categoryType];\r\n        this.rootCategories[categoryType] = this.buildCategories(categoryData);\r\n    }\r\n}\r\n\r\nMenu.prototype.getFoodCategory = function() {\r\n    return this.rootCategories[\"Food\"];\r\n}\r\n\r\nMenu.prototype.getCouponCategory = function() {\r\n    return this.rootCategories[\"Coupons\"];\r\n}\r\n\r\nMenu.prototype.getPreconfiguredCategory = function() {\r\n    return this.rootCategories[\"PreconfiguredProducts\"];\r\n}\r\n\r\nMenu.prototype.getItemByCode = function(code) {\r\n    return this.menuByCode[code];\r\n}\r\n\r\nmodule.exports = Menu;\r\n","/home/travis/build/npmtest/node-npmtest-dominos/node_modules/dominos/src/Store.js":"'use strict';\n\nvar httpJson = require('./http-json');\nvar urls = require('./urls.json');\nvar util=require('util');\nvar fs=require('fs');\nvar Menu=require('./Menu.js');\n\nvar Store = function(parameters) {\n    this.ID = parameters.ID;\n};\n\nStore.prototype.getInfo = function(callback) {\n    if( !this.ID || !callback){\n        if(callback)\n            callback(\n                {\n                    success: false,\n                    message: 'A callback is required to get store info'\n                }\n            );\n        return;\n    }\n\n    httpJson.get(urls.store.info.replace('${storeID}', this.ID), callback);\n};\n\nStore.prototype.getMenu = function(callback, lang, noCache) {\n    if (this.cachedMenu && !noCache) {\n        callback(this.cachedMenu); //TODO as below, break compatibility by removing first parameter\n        return;\n    }\n    if( !this.ID || !callback){\n        if(callback)\n            callback({\n                success: false,\n                message: 'A callback is required to get a store menu'\n            });\n        return;\n    }\n\n    if(!lang)\n        lang = 'en';\n\n    var url = urls.store.menu.replace('${storeID}', this.ID)\n        .replace('${lang}', lang);\n\n\n    httpJson.get(url,(function(jsonObj) {\n        this.cachedMenu = new Menu(jsonObj);\n        callback(this.cachedMenu); //TODO break compatibility by removing first parameter\n    }).bind(this));\n\n    /*\n    httpJson.get(\n        url,\n        (function(response) {\n            fs.writeFile('sampleResp/menu'+this.ID+'.json', JSON.stringify(response, null, 4), function (err) {\n                if (err) throw err;\n                console.log('It\\'s saved!');\n            });\n        }).bind(this)\n    );\n    */\n};\n\nStore.prototype.getFriendlyNames = function(callback, lang) {\n  if( !this.ID || !callback){\n      if(callback)\n          callback({\n              success: false,\n              message: 'A callback is required to get a store menu'\n          });\n      return;\n  }\n\n  if(!lang)\n      lang = 'en';\n\n  var url = urls.store.menu.replace('${storeID}', this.ID)\n      .replace('${lang}', lang);\n\n  httpJson.get(url, function(result) {\n    var itemMapping = [];\n    var keys = Object.keys(result.result.Variants);\n    keys.forEach(function(key) {\n      var json = {};\n      json[result.result.Variants[key].Name] = key\n      itemMapping.push(json);\n    });\n\n    callback({ success: true, result: itemMapping });\n  });\n}\n\nmodule.exports = Store;\n","/home/travis/build/npmtest/node-npmtest-dominos/node_modules/dominos/src/Track.js":"'use strict';\n\nvar urls = require('./urls.json');\nvar request = require('request');\nvar parser = require('xml2json');\n\nmodule.exports.byPhone = function(phone, callback) {\n    if( !phone || !callback) {\n        if(callback) {\n            callback({\n                success: false,\n                message: 'Phone is required!'\n            });\n        }\n        return;\n    }\n\n    this.byUrl(urls.track + 'Phone=' + phone, callback);\n};\n\nmodule.exports.byId = function(storeID, orderKey, callback) {\n    if(!storeID || !orderKey || !callback){\n        if(callback)\n            callback({\n                success: false,\n                message: 'storeID, orderKey, and callback are all required to get pizza info using the orderKey'\n            });\n        return;\n    }\n\n    this.byUrl(urls.track + 'StoreID=' + storeID + '&OrderKey=' + orderKey, callback);\n};\n\nmodule.exports.byUrl = function(url, callback){\n    request.get(\n        url,\n        function (error, response, body) {\n            if (error) {\n                callback({\n                    success: false,\n                    message: error\n                });\n                return;\n            }\n\n            if (response.statusCode !== 200){\n                callback({\n                    success: false,\n                    message:'HTML Status Code Error ' + response.statusCode\n                });\n                return;\n            }\n\n            var result = parser.toJson(\n                body,\n                {\n                    coerce: false,\n                    sanitize: false,\n                    object: true,\n                    trim: false\n                }\n            );\n\n            if(!result['soap:Envelope']){\n                callback({\n                    success: false,\n                    message: 'API soap:Envelope not present',\n                    data: result\n                });\n                return;\n            }\n\n            if(!result['soap:Envelope']['soap:Body']){\n                callback({\n                    success: false,\n                    message: 'API soap:Body not present',\n                    data: result\n                });\n                return;\n            }\n\n            if(!result['soap:Envelope']['soap:Body'].GetTrackerDataResponse){\n                callback({\n                    success: false,\n                    message:'API GetTrackerDataResponse not present',\n                    data: result\n                });\n                return;\n            }\n\n            callback({\n                orders: result['soap:Envelope']['soap:Body'].GetTrackerDataResponse.OrderStatuses,\n                query: result['soap:Envelope']['soap:Body'].GetTrackerDataResponse.Query\n            });\n        }\n    );\n};\n","/home/travis/build/npmtest/node-npmtest-dominos/node_modules/dominos/src/Utilities.js":"'use strict';\n\nvar httpJson = require('./http-json.js');\nvar urls = require('./urls.json');\nvar Address = require('./Address.js');\n\nvar findNearbyStores = function(address, pickUpType, callback) {\n    if(typeof pickUpType == 'function'){\n        callback=pickUpType;\n        pickUpType='Delivery';\n    }\n    if(!address || !callback) {\n        if(!callback){\n            throw('invalid findNearbyStores request. address and callback are required at a minimum.');\n        }\n        if(callback) {\n            callback(\n                {\n                    success: false,\n                    message: 'At least a partial address (minimum accepted is zipcode) is required to find stores'\n                }\n            );\n        }\n        return false;\n    }\n\n    var address = new Address(address)\n    var addressLines=address.getAddressLines();\n\n    var url = urls.store.find.replace(\n        '${line1}',\n        encodeURI(\n          addressLines.line1\n        )\n    ).replace(\n        '${line2}',\n        encodeURI(\n          addressLines.line2\n        )\n    ).replace(\n        '${type}',\n        pickUpType||'Delivery'\n    );\n\n    httpJson.get(url, callback);\n};\n\nmodule.exports = {\n    findNearbyStores: findNearbyStores\n};\n"}